swirl()
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
}
read.csv("C:\\Users\\Josh\\ProgrammingAssignment2\\cachematrix.R")
x
x <- c("my", "function", "teaches","me","to","cache")
x
collapse(x, " ")
x(collapse, " ")
ls
makeCacheMatrix <- function(x = matrix()){}
if(!is.null(m)){message("getting cached data") return(m)}
if(!is.null)
{message("getting cached data")}
makeCacheMatrix <- function(x=matrix()){}
makeCacheMatrix <- function(x=matrix()){
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<-solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix,
setmatrix=setmatrix)
}
makeCacheMatrix
makeCacheMatrix <- function(x=matrix()){
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<-solve
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
makeCacheMatrix
cacheSolve <- function(x=matrix(), ...){
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix,...)
x$setmatrix(m)
m
}
makeVector <- function(x = numeric())
{}
makeVector <- function(x = numeric()){
m <- NULL
set<-function(y){
x<<-y
m<<-NULL
}
get <- function() x
setmean <- function(mean) m<<-mean
getmean <- function() m
list (set=set, get=get, setmean=setmean, getmean=getmean)
}
cachemean<-function(x,...){
m<- x$getmean()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data,...)
x$setmean(m)
m
}
x
ls()
read.csv("C:\\Users\\Josh\\ProgrammingAssignment2\\cachematrix.R")
ls()
doc<-read.csv("C:\\Users\\Josh\\ProgrammingAssignment2\\cachematrix.R")
doc
class(doc)
dim(doc)
nrow(doc)
ncol(doc)
object.size(doc)
names(doc)
head(doc)
head(doc,10)
tail(doc)
ls
ls()
summary(doc)
summary()
table(doc)
table(doc$return a matrix that is the inverse of 'x')
table(doc$##)
{}
str(doc)
length(doc)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
ls()
save()
save(doc)
save("doc")
